// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  role     role      @default(STUDENT)
  password String
  student  student[]

  @@index([name])
}

model student {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  user     User    @relation(fields: [userId], references: [id])
  usn      String  @unique
  branch   Branch
  sem      Int     @default(3)
  year     Int     @default(2020)
  cgpa     Float
  backlogs Int     @default(0)
  resume   String?
  aadhar   String?
  skill    Skill[]
  Stat     Stat[]

  @@index([usn])
}

model Skill {
  id        Int     @id @default(autoincrement())
  name      String
  studentId Int     @unique
  student   student @relation(fields: [studentId], references: [id])

  @@index([studentId])
}

model Drive {
  id          Int       @id @default(autoincrement())
  name        String //drive name
  company     String //company name
  description String //description about company
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  profile     Profile[]
  Stat        Stat[]
}

model Profile {
  id               Int    @id @default(autoincrement())
  name             String
  description      String
  qualification    String
  cutoff           String
  ctc              String
  stipend          String
  location         String
  serviceAgreement String
  driveID          Int
  drive            Drive  @relation(fields: [driveID], references: [id])

  @@index([driveID])
}

model Stat {
  id        Int      @id @default(autoincrement())
  driveID   Int
  drive     Drive    @relation(fields: [driveID], references: [id])
  studentID Int
  student   student  @relation(fields: [studentID], references: [id])
  updatedAt DateTime @updatedAt

  @@unique([driveID, studentID])
  @@index([driveID])
}

enum role {
  STUDENT
  MENTOR
  MANAGER
}

enum Branch {
  CSE
  ME
  ECE
  EEE
  CIVIL
  CSDS
  AIML
  CSBS
  MCA
  MBA
}
